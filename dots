#!/bin/bash

#-----------------------------------------------------------------------------#
# dots (github.com/totegoat/dots)
#
# This script utilizes Git to easily bootstrap a fresh system with or 
# replicate dotfiles across multiple hosts or containers.
#
# - Symlinks are used for local dotfiles so that changes can be immediately 
#   registered in Git.
# 
# - Packages are installed utilizing distro-specific package managers.
#
# - Dotfiles can be configured from any Git repo containing a Dotsfile file. 
#
# - Supports encrypting/decrypting "secrets" before they are pushed to Git.
#
#-----------------------------------------------------------------------------#

set -e

# Local configuration directory
config_dir=$HOME/.config/dots

# In-path bin directory
bin_dir=$HOME/.local/bin  

# Local application directory
app_dir=$HOME/.local/share/dots

# Local copy of the dots repo
local_dots=$app_dir/dots-repo

# Remote dots git repository 
remote_dots=https://github.com/totegoat/dots

# Default value will use totegoat/dotsfile sample
dotfiles_url=https://github.com/totegoat/dotsfiles

# Local copy of dotfiles repo
dotfiles_dir=$app_dir/dotfiles

# Dotsfile in dotfiles repo
dotsfile=$dotfiles_dir/Dotsfile

# Symmetric encryption passphrase -- used to encrypt/decrypt secrets
pass_file=$config_dir/passfile

# Packages to be installed with install_packages()
#
# These default packages are the base packages required by Dots and will be
# installed during bootstrap()
packages="git gpg curl zip unzip"

# Git default binary
git_tool=git
git_flag=false

# Default method for show()
show_method=apply

# Do not run privileged commands with sudo by default
sudo=""

# Output modifiers
# tput is not installed everywhere, also requires TERM be set -- this is 
# problematic on minimal containers.
bold=$'\033[1m'
norm=$'\033[0m'

#
# Print usage instructions
#
print_usage() {
    echo
    echo "Usage: dots COMMAND [OPTIONS]"
    echo
    echo "Commands:"
    echo "         bootstrap [--sudo | --gh]"
    echo "                 - Configures a fresh system for Dots (dotfiles management)."
    echo
    echo "         setup <URL to remote repo> [--gh]"
    echo "                 - Set-up your dotfiles Git repo (must contain Dotsfile)."
    echo
    echo "         apply"
    echo "                 - Reads the Dotsfile in your dotfiles repo and applies the"
    echo "                   configuration locally."
    echo
    echo "         stage"
    echo "                 - Stages your archives and secrets for git push to remote."
    #echo
    #echo "         show [apply | stage]"
    #echo "                 - Display the outcome of the current Dotsfile configuration"
    #echo "                   for either command - defaults to 'apply' (ie. dryrun)."
    echo 
    echo "         status"
    echo "                 - Prints the git status of your dotfiles."
    echo
    echo "         source"
    echo "                 - Allows dots script to bypass exec, ie. import as library."
    echo
    echo "Options:"
    echo "         --sudo (enable sudo, eg. running as non-root)"
    echo "         --gh   (GitHub CLI for dotfiles in a GH private repo)"
    echo 
    echo "Supported Distros (ie. package managers):"
    echo "         Debian (also Ubuntu)"
    echo "         RHEL   (also CentOS, Fedora, Rocky)"
    echo "         Amazon (Amazon Linux 2) "
    #echo "         Slackware"
    #echo "         macOS"
    echo
}

#
# Distro Discovery
#
discover_distro() {
    distro=unknown

    if [ -f "/etc/debian_version" ]; then
        distro=debian

    elif [ -f "/etc/yum.repos.d/amzn2-core.repo" ]; then
        distro=amazon

    elif [ -f "/etc/centos-release" ] ||
         [ -f "/etc/rocky-release" ] ||
         [ -f "/etc/fedora-release" ]; then
        distro=rhel

    elif [ -f "/etc/slackware-version" ]; then
        distro=slackware

    elif [ "$(uname -s 2> /dev/null)" = "Darwin" ]; then
        distro=macos
    fi
}

#
# Setup package managers according to distro
#
setup_package_manager() {
    discover_distro

    if [ "$distro" == "unknown" ]; then
        echo "${bold}Unknown distro.${norm} See supported distros below. Exiting..."
        print_usage
        exit 1
    else
        echo
        echo "Distro identified as ${bold}$distro${norm}."
        echo
    fi

    # Select the distro-specific package tool commands
    if [ "$distro" == "debian" ]; then
        pkgmgr_update="$sudo apt update"
        pkgmgr_install="$sudo apt install -y "

    elif [ "$distro" == "rhel" ]; then
        # minimal containers use dnf5/microdnf
        if [ -f /usr/bin/microdnf ]; then 
            dnf_tool=microdnf
            pkgmgr_update=""
        else 
            dnf_tool=dnf
            pkgmgr_update="$sudo $dnf_tool update -y"
        fi
        pkgmgr_install="$sudo $dnf_tool install -y "

    elif [ "$distro" == "amazon" ]; then
        pkgmgr_update="$sudo yum update -y"
        pkgmgr_install="$sudo yum install -y "

    elif [ "$distro" == "slackware" ]; then
        pkgmgr_update="TBD"
        pkgmgr_install="TBD"

    elif [ "$distro" == "macos" ]; then
        pkgmgr_update="brew update"
        pkgmgr_install="brew install "
    fi
}

#
# Install GitHub CLI w/ distro package managers
#
install_ghcli() {
    # If GitHub CLI has been flagged, setup the GH repos.
    #
    # Linux installation docs:
    #     https://github.com/cli/cli/blob/trunk/docs/install_linux.md
    #
    # macOS installation docs:
    #     https://github.com/cli/cli#installation
    #
    if [ "$distro" = "debian" ]; then
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | $sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && $sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | $sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null 
        $pkgmgr_update
        $pkgmgr_install gh

    elif [ "$distro" = "rhel" ]; then
        # $pkgmgr_install 'dnf-command(config-manager)'
        # $sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo 
        #
        # Install from the community repository instead
        $pkgmgr_install gh

    elif [ "$distro" = "amazon" ]; then
        $pkgmgr_install yum-utils
        $sudo yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
        $pkgmgr_install gh

    elif [ "$distro" = "slackware" ]; then
        # place holder
        echo slackware GH install here

    elif [ "$distro" = "macos" ]; then
        $pkgmgr_install gh

    fi
}

#
# Install packages with distro's package manager
#
install_packages() {
    setup_package_manager

    # Update package manager
    $pkgmgr_update

    # Install packages
    echo "Installing required packages ${bold}($packages)${norm} for dots..."
    $pkgmgr_install $packages

    # If GitHub CLI has been flagged, install it
    if $git_flag; then
        install_ghcli
    fi
}

#
# Create passphrase file for symmetric encryption of secrets
#
passphrase_file() {
    if [ ! -f $pass_file ]; then
        echo
        echo "Setting up passphrase file..."
        mkdir -p $config_dir
        touch $pass_file

    else
        echo
        echo "Passphrase file already exists at $pass_file. Continuing..."
    fi
    chmod 600 $pass_file
}

#
# Clone dots git repository
#
clone_dots_repo() {
    if [ ! -d $local_dots ]; then
        echo
        echo "Cloning dots repo..."
        mkdir -p $app_dir
        $git_tool clone $remote_dots $local_dots

    else
        echo
        echo "$local_dots already exists. Skipping dots clone..."
    fi
}

#
# Setup a dots "executable" in path
#
setup_dots_exec() {
    if [ ! -L $bin_dir/dots ]; then
        echo
        echo "Setting up dots executable..."
        mkdir -p $bin_dir 
        ln -s $local_dots/dots $bin_dir/dots &> /dev/null

    else
        echo
        echo `ls -l $bin_dir/dots | rev | cut -d' ' -f1-3 | rev`
        echo "^^^ already exists. Continuing..."
    fi

    # Make sure bin_dir/dots symlink is in PATH
    if ! echo $PATH | grep -q "$bin_dir" &>/dev/null; then
        echo "    Be sure to add $bin_dir to your PATH. Run the below before"
        echo "    proceeding and add it to your .bashrc:"
        echo
        echo "    ${bold}export PATH=$bin_dir:\$PATH${norm}"
    else
        echo
        echo "$bin_dir already in PATH."
    fi
}

#
# Make sure dotfiles and Dotsfile are present
#
check_dotfiles_repo() {
    if [ ! -d $dotfiles_dir ]; then
        echo "${bold}Error:${norm} No dotfiles repo found at $dotfiles_dir -- Make sure to 'setup' one."
        echo
        print_usage
        exit 1
    fi

    if [ ! -f $dotsfile ]; then
        echo "${bold}Error:${norm} No Dotsfile found in $dotfiles_dir -- see $local_dots/Dotsfile for more information."
        echo
        print_usage
        exit 1
    fi
}

#---------------------#
#      COMMANDS       #
#---------------------#
#
# Configures a fresh end system for Dots exec
#
bootstrap() {

    install_packages
    clone_dots_repo        
    passphrase_file
    setup_dots_exec

    echo
    echo "${bold}Done. ${norm} After add $bin_dir to your path, run \"dots\" without any args for instructions."
    echo "${bold}Be sure to put your encryption passphrase in $pass_file.${norm}"

    if $git_flag; then
        echo
        echo "GitHub CLI was installed..." 
        echo "To get started with GitHub CLI, please run:  gh auth login"
        echo "Alternatively, populate the GH_TOKEN environment variable with a GitHub API authentication token."
    fi
}

#
# Setup dotfiles Git repo
#
setup() {
    if [ ! -d $dotfiles_dir ]; then
        echo
        echo "Cloning your dotfiles repo..."
        $git_tool clone $dotfiles_url $dotfiles_dir

        if [ ! -f $dotsfile ]; then
            echo
            echo "${bold}Warning: ${norm}No $dotsfile found in $dotfiles_dir"
        fi
    else
        echo
        echo "$dotfiles_dir already exists. Skipping clone..."
    fi
    # echo "$git_tool clone $2 $dotfiles_dir"
}

#
# Apply Dotsfile configuration
#
apply() {
    check_dotfiles_repo

    # Import Dotsfile
    . $dotsfile

    # Packages
    #
    #
    
    # Directories
    for dir in "${dotdirs[@]}"; do
        # dir:   ${d_field[0]}
        # perms: ${d_field[1]}
        read -a d_field <<< "$dir"
        if [ ! -d "${d_field[0]}" ]; then
            echo "${bold}[Directory]${norm} Making directory: ${d_field[0]}"
            mkdir -p $HOME/${d_field[0]}
        else
            echo "${bold}[Directory]${norm} $HOME/${d_field[0]} already exists."
        fi

        # Make sure the permissions are correct, even if it already exists
        chmod ${d_field[1]} $HOME/${d_field[0]} &>/dev/null
    done

    # Symlink dotfiles
    for link in "${dotfiles[@]}"; do
        # target: ${l_fields[0]}
        # link:   ${l_fields[1]}
        read -a l_fields <<< "$link"
        if ! ls $dotfiles_dir/${l_fields[0]} &>/dev/null; then
            echo "${bold}[Dotfile]${norm} $dotfiles_dir/${l_fields[0]} doesn't exist. Skipping..."
        else
            echo "${bold}[Dotfile]${norm} $dotfiles_dir/${l_fields[0]} -> $HOME/${l_fields[1]}"
            if ls $HOME/${l_fields[1]} &>/dev/null && 
               [ ! -L $HOME/${l_fields[1]} ]; then
                mv $HOME/${l_fields[1]} $HOME/${l_fields[1]}_dots.orig
            fi
            ln -sfn $dotfiles_dir/${l_fields[0]} $HOME/${l_fields[1]}
        fi
    done

    # Decrypt secrets
    for secret in "${secrets[@]}"; do
        # src:   ${s_fields[0]}
        # dst:   ${s_fields[1]}
        # perms: ${s_fields[2]}
        read -a s_fields <<< "$secret"
        if ! ls $dotfiles_dir/${s_fields[0]} &>/dev/null; then
            echo "${bold}[Secret]${norm} Decrypt: $dotfiles_dir/${s_fields[0]} doesn't exist. Skipping..."
        else
            echo "${bold}[Secret]${norm} Decrypt: ${s_fields[0]}"
            gpg --batch --yes --passphrase-file $pass_file --output $HOME/${s_fields[1]} -a -d $dotfiles_dir/${s_fields[0]} &>/dev/null
            chmod ${s_fields[2]} $HOME/${s_fields[1]}
        fi
    done

    # Decompress archives
    for archive in "${archives[@]}"; do
        # local path:   a_fields[0]
        # archive name: a_fields[1]
        # file perms:   a_fields[2]
        read -a a_fields <<< "$archive"
        afile=$HOME/${a_fields[0]}/${a_fields[1]}
        if ! ls $afile &>/dev/null; then
            echo "${bold}[Archive]${norm} Decompress: $afile doesn't exist. Skipping..."
        else
            echo "${bold}[Archive]${norm} Decompress: ${a_fields[0]}"
            cd $HOME/${a_fields[0]} && unzip ${a_fields[1]} && rm ${a_fields[1]}
            chmod ${a_fields[2]} *
            cd -
        fi
    done
}

#
# Stage files in preparation for dotfiles repo push
#
stage() {
    check_dotfiles_repo

    # Import Dotsfile
    . $dotsfile

    # Clean-up local archives and encrypted files after they've been copied
    # to the dotfiles git repo
    clean_up=()

    # Compress files in their respective places
    for archive in "${archives[@]}"; do
        # local path:   a_fields[0]
        # archive name: a_fields[1]
        # file perms:   a_fields[2]
        read -a a_fields <<< "$archive"
        if ! ls $HOME/${a_fields[0]} &>/dev/null; then
            echo "${bold}[Archive]${norm} Compress: $HOME/${a_fields[0]} doesn't exist. Skipping..."
        elif ! ls $HOME/${a_fields[0]}/* &>/dev/null; then
            echo "${bold}[Archive]${norm} Compress: No files in $HOME/${a_fields[0]} to compress. Skipping..."
        else
            echo "${bold}[Archive]${norm} Compress: ${a_fields[0]}/*"
            cd $HOME/${a_fields[0]} && zip -q -o ${a_fields[1]} *
            chmod ${a_fields[2]} ${a_fields[1]}
            clean_up+=("$HOME/${a_fields[0]}/${a_fields[1]}")
            cd - &>/dev/null
        fi
    done

    # Encrypt archives and files, and copy to local git repo 
    for secret in "${secrets[@]}"; do
        # src:   ${s_fields[0]}
        # dst:   ${s_fields[1]}
        # perms: ${s_fields[2]}
        read -a s_fields <<< "$secret"
        secret_path=$HOME/$(echo "${s_fields[1]}" | rev | cut -d'/' -f2- | rev)
        secret_name=$(echo "${s_fields[1]}" | rev | cut -d'/' -f1 | rev)
        repo_path=$dotfiles_dir/$(echo "${s_fields[0]}" | cut -d'/' -f1)

        if ! ls $HOME/${s_fields[1]} &>/dev/null; then
            echo "${bold}[Secret]${norm} Encrypt: $HOME/${s_fields[1]} doesn't exist. Skipping..."
        else
            echo "${bold}[Secret]${norm} Encrypt: ${s_fields[1]}"
            cd $secret_path
            gpg -a --symmetric --cipher-algo AES256 --batch --yes --passphrase-file $pass_file $HOME/${s_fields[1]}
            cd - &>/dev/null
        
            if [ ! -d $repo_path ]; then
                echo "${bold}[Secret]${norm} Encrypt: making directory $repo_path..."
                mkdir -p $repo_path
            fi
            cp $HOME/${s_fields[1]}.asc $repo_path && clean_up+=("$HOME/${s_fields[1]}.asc")
        fi
    done

    # Clean-up temp files
    echo "${bold}[Secret]${norm} Clean-up: deleting temporary files..."
    for tmp_file in "${clean_up[@]}"; do
        rm $tmp_file
    done
}

#
# Dry-run Dotsfile configuration and print outcome
#
# show(){
#    check_dotfiles_repo

    # Import Dotsfile
#    . $dotsfile

#    echo "${bold}[Show]${norm} $show_method"

#    show_dir=$app_dir/tmp-show
#    if [ ! -d $show_dir ]; then
#        mkdir -p $show_dir
#    fi
# }

#
# Git status of the dotfiles repo/directory
#
status() {
    if [ ! -d $dotfiles_dir ]; then
        echo "Error: $dotfiles_dir doesn't exist -- must 'setup' dotfiles repo first."
        print_usage
        exit 1
    else
        echo 
        echo "Your dotfiles git repo (local copy) is here:"
        echo
        echo "     ${bold}$dotfiles_dir${norm}"
        echo
        echo "     CD into the above directory and use git commands, such as status," 
        echo "     add/commit, and push to staged files to remote dotfiles repo or pull" 
        echo "     changes from the remote repo before running 'dots apply'."
        echo 
        echo "+-------------+"
        echo "| git status: | $dotfiles_dir "
        echo "+-------------+"
        cd $dotfiles_dir &>/dev/null && git status
    fi
}

#
# Main: Check arguments & run
#       $1 Command
#       $2 Option
#       $3 Option
#
if [ -z "$1" ]; then
    print_usage
    exit 0

elif [ "$1" != "source" ]; then  # if source is set skip all exec below
    # COMMAND
    if [ "$1" = "bootstrap" ]; then
        # OPTIONS
        if [ -n "$2" ]; then
            if [ "$2" = "--sudo" ]; then
                sudo="sudo"
            elif [ "$2" = "--gh" ]; then
                git_flag=true
            else
                echo "Error: $2 is not a valid option."    
                print_usage
                exit 1
            fi
        fi
            
        if [ -n "$3" ]; then
            if [ "$3" = "--sudo" ]; then
                sudo="sudo"
            elif [ "$3" = "--gh" ]; then
                git_flag=true
            else
                echo "Error: $3 is not a valid option."    
                print_usage
                exit 1
            fi
        fi
        
        bootstrap

    # COMMAND
    elif [ "$1" = "setup" ]; then
        if [ -z "$2" ]; then
            echo "Error: must include URL to dotfiles Git repo."
            print_usage
            exit 1
        fi

        if [ -n "$2" ] && [ -z "$3" ]; then
            dotfiles_url=$2
            setup

        # OPTIONS
        elif [ -n "$2" ] && [ -n "$3" ]; then
            if [ "$3" = "--gh" ]; then
                if ! which gh &>/dev/null; then
                    echo "Error: GitHub CLI not installed."
                    echo 
                    echo "You can install GitHub CLI with 'dots bootstrap --gh'."
                    print_usage
                    exit 1
                fi
                git_tool="gh repo"
                setup

            else
                echo "Error: $3 is not a valid option."    
                print_usage
                exit 1
            fi
        fi

    # COMMAND
    elif [ "$1" = "apply" ]; then
        apply

    # COMMAND
    elif [ "$1" = "stage" ]; then
        stage

    # COMMAND
    # elif [ "$1" = "show" ]; then
        # OPTIONS
    #    if [ -n "$2" ]; then
    #        if [ "$2" = "apply" ]; then
                # show_method=apply set as default 
    #            show
    #        elif [ "$2" = "stage" ]; then
    #            show_method=$2
    #            show
    #        else
    #            echo "Error: $2 is not a valid option."    
    #            print_usage
    #            exit 1
    #        fi
    #    else
    #        show
    #    fi

    # COMMAND
    elif [ "$1" = "status" ]; then
        status

    else
        echo "Error: $1 is not a valid command."
        print_usage
        exit 1
    fi
fi
